/* Auto-generated by genmsg_cpp for file /home/paralax2/fuerte_workspace/sandbox/eddiebot/eddiebot_node/msg/LaptopChargeStatus.msg */
#ifndef EDDIEBOT_NODE_MESSAGE_LAPTOPCHARGESTATUS_H
#define EDDIEBOT_NODE_MESSAGE_LAPTOPCHARGESTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace eddiebot_node
{
template <class ContainerAllocator>
struct LaptopChargeStatus_ {
  typedef LaptopChargeStatus_<ContainerAllocator> Type;

  LaptopChargeStatus_()
  : header()
  , voltage(0.0)
  , rate(0.0)
  , charge(0.0)
  , capacity(0.0)
  , design_capacity(0.0)
  , percentage(0)
  , charge_state(0)
  , present(false)
  {
  }

  LaptopChargeStatus_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , voltage(0.0)
  , rate(0.0)
  , charge(0.0)
  , capacity(0.0)
  , design_capacity(0.0)
  , percentage(0)
  , charge_state(0)
  , present(false)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef float _voltage_type;
  float voltage;

  typedef float _rate_type;
  float rate;

  typedef float _charge_type;
  float charge;

  typedef float _capacity_type;
  float capacity;

  typedef float _design_capacity_type;
  float design_capacity;

  typedef int32_t _percentage_type;
  int32_t percentage;

  typedef uint8_t _charge_state_type;
  uint8_t charge_state;

  typedef uint8_t _present_type;
  uint8_t present;

  enum { DISCHARGING = 0 };
  enum { CHARGING = 1 };
  enum { CHARGED = 2 };

  typedef boost::shared_ptr< ::eddiebot_node::LaptopChargeStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::eddiebot_node::LaptopChargeStatus_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LaptopChargeStatus
typedef  ::eddiebot_node::LaptopChargeStatus_<std::allocator<void> > LaptopChargeStatus;

typedef boost::shared_ptr< ::eddiebot_node::LaptopChargeStatus> LaptopChargeStatusPtr;
typedef boost::shared_ptr< ::eddiebot_node::LaptopChargeStatus const> LaptopChargeStatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::eddiebot_node::LaptopChargeStatus_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::eddiebot_node::LaptopChargeStatus_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace eddiebot_node

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::eddiebot_node::LaptopChargeStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::eddiebot_node::LaptopChargeStatus_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::eddiebot_node::LaptopChargeStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "201bffbb268bdae8f8389acae4ae6db2";
  }

  static const char* value(const  ::eddiebot_node::LaptopChargeStatus_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x201bffbb268bdae8ULL;
  static const uint64_t static_value2 = 0xf8389acae4ae6db2ULL;
};

template<class ContainerAllocator>
struct DataType< ::eddiebot_node::LaptopChargeStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eddiebot_node/LaptopChargeStatus";
  }

  static const char* value(const  ::eddiebot_node::LaptopChargeStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::eddiebot_node::LaptopChargeStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 DISCHARGING = 0\n\
uint8 CHARGING    = 1\n\
uint8 CHARGED     = 2\n\
\n\
Header  header\n\
float32 voltage          # Voltage in Volts\n\
float32 rate             # Negative when discharging (A)\n\
float32 charge           # Current charge in Ah\n\
float32 capacity         # Capacity in Ah (last full capacity)\n\
float32 design_capacity  # Capacity in Ah (design capacity)\n\
int32   percentage       # Charge percentage\n\
uint8   charge_state     # Enum \n\
bool    present          # Should be an error if battery is not present\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::eddiebot_node::LaptopChargeStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::eddiebot_node::LaptopChargeStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::eddiebot_node::LaptopChargeStatus_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::eddiebot_node::LaptopChargeStatus_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.voltage);
    stream.next(m.rate);
    stream.next(m.charge);
    stream.next(m.capacity);
    stream.next(m.design_capacity);
    stream.next(m.percentage);
    stream.next(m.charge_state);
    stream.next(m.present);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LaptopChargeStatus_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::eddiebot_node::LaptopChargeStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::eddiebot_node::LaptopChargeStatus_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    s << indent << "rate: ";
    Printer<float>::stream(s, indent + "  ", v.rate);
    s << indent << "charge: ";
    Printer<float>::stream(s, indent + "  ", v.charge);
    s << indent << "capacity: ";
    Printer<float>::stream(s, indent + "  ", v.capacity);
    s << indent << "design_capacity: ";
    Printer<float>::stream(s, indent + "  ", v.design_capacity);
    s << indent << "percentage: ";
    Printer<int32_t>::stream(s, indent + "  ", v.percentage);
    s << indent << "charge_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.charge_state);
    s << indent << "present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.present);
  }
};


} // namespace message_operations
} // namespace ros

#endif // EDDIEBOT_NODE_MESSAGE_LAPTOPCHARGESTATUS_H

