/* Auto-generated by genmsg_cpp for file /home/paralax2/fuerte_workspace/sandbox/eddiebot/eddiebot_node/srv/SetEddiebotMode.srv */
#ifndef EDDIEBOT_NODE_SERVICE_SETEDDIEBOTMODE_H
#define EDDIEBOT_NODE_SERVICE_SETEDDIEBOTMODE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace eddiebot_node
{
template <class ContainerAllocator>
struct SetEddiebotModeRequest_ {
  typedef SetEddiebotModeRequest_<ContainerAllocator> Type;

  SetEddiebotModeRequest_()
  : mode(0)
  {
  }

  SetEddiebotModeRequest_(const ContainerAllocator& _alloc)
  : mode(0)
  {
  }

  typedef uint8_t _mode_type;
  uint8_t mode;


  typedef boost::shared_ptr< ::eddiebot_node::SetEddiebotModeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::eddiebot_node::SetEddiebotModeRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetEddiebotModeRequest
typedef  ::eddiebot_node::SetEddiebotModeRequest_<std::allocator<void> > SetEddiebotModeRequest;

typedef boost::shared_ptr< ::eddiebot_node::SetEddiebotModeRequest> SetEddiebotModeRequestPtr;
typedef boost::shared_ptr< ::eddiebot_node::SetEddiebotModeRequest const> SetEddiebotModeRequestConstPtr;


template <class ContainerAllocator>
struct SetEddiebotModeResponse_ {
  typedef SetEddiebotModeResponse_<ContainerAllocator> Type;

  SetEddiebotModeResponse_()
  : valid_mode(false)
  {
  }

  SetEddiebotModeResponse_(const ContainerAllocator& _alloc)
  : valid_mode(false)
  {
  }

  typedef uint8_t _valid_mode_type;
  uint8_t valid_mode;


  typedef boost::shared_ptr< ::eddiebot_node::SetEddiebotModeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::eddiebot_node::SetEddiebotModeResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetEddiebotModeResponse
typedef  ::eddiebot_node::SetEddiebotModeResponse_<std::allocator<void> > SetEddiebotModeResponse;

typedef boost::shared_ptr< ::eddiebot_node::SetEddiebotModeResponse> SetEddiebotModeResponsePtr;
typedef boost::shared_ptr< ::eddiebot_node::SetEddiebotModeResponse const> SetEddiebotModeResponseConstPtr;

struct SetEddiebotMode
{

typedef SetEddiebotModeRequest Request;
typedef SetEddiebotModeResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetEddiebotMode
} // namespace eddiebot_node

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::eddiebot_node::SetEddiebotModeRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::eddiebot_node::SetEddiebotModeRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::eddiebot_node::SetEddiebotModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "89b81386720be1cd0ce7a3953fcd1b19";
  }

  static const char* value(const  ::eddiebot_node::SetEddiebotModeRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x89b81386720be1cdULL;
  static const uint64_t static_value2 = 0x0ce7a3953fcd1b19ULL;
};

template<class ContainerAllocator>
struct DataType< ::eddiebot_node::SetEddiebotModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eddiebot_node/SetEddiebotModeRequest";
  }

  static const char* value(const  ::eddiebot_node::SetEddiebotModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::eddiebot_node::SetEddiebotModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 mode\n\
\n\
";
  }

  static const char* value(const  ::eddiebot_node::SetEddiebotModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::eddiebot_node::SetEddiebotModeRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::eddiebot_node::SetEddiebotModeResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::eddiebot_node::SetEddiebotModeResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::eddiebot_node::SetEddiebotModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ef9db56bf4a60ce42049595d58c32b54";
  }

  static const char* value(const  ::eddiebot_node::SetEddiebotModeResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xef9db56bf4a60ce4ULL;
  static const uint64_t static_value2 = 0x2049595d58c32b54ULL;
};

template<class ContainerAllocator>
struct DataType< ::eddiebot_node::SetEddiebotModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eddiebot_node/SetEddiebotModeResponse";
  }

  static const char* value(const  ::eddiebot_node::SetEddiebotModeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::eddiebot_node::SetEddiebotModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool valid_mode\n\
\n\
";
  }

  static const char* value(const  ::eddiebot_node::SetEddiebotModeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::eddiebot_node::SetEddiebotModeResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::eddiebot_node::SetEddiebotModeRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.mode);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetEddiebotModeRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::eddiebot_node::SetEddiebotModeResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.valid_mode);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetEddiebotModeResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<eddiebot_node::SetEddiebotMode> {
  static const char* value() 
  {
    return "652c4fe00e931153f82f8af90f1da441";
  }

  static const char* value(const eddiebot_node::SetEddiebotMode&) { return value(); } 
};

template<>
struct DataType<eddiebot_node::SetEddiebotMode> {
  static const char* value() 
  {
    return "eddiebot_node/SetEddiebotMode";
  }

  static const char* value(const eddiebot_node::SetEddiebotMode&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<eddiebot_node::SetEddiebotModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "652c4fe00e931153f82f8af90f1da441";
  }

  static const char* value(const eddiebot_node::SetEddiebotModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<eddiebot_node::SetEddiebotModeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eddiebot_node/SetEddiebotMode";
  }

  static const char* value(const eddiebot_node::SetEddiebotModeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<eddiebot_node::SetEddiebotModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "652c4fe00e931153f82f8af90f1da441";
  }

  static const char* value(const eddiebot_node::SetEddiebotModeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<eddiebot_node::SetEddiebotModeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eddiebot_node/SetEddiebotMode";
  }

  static const char* value(const eddiebot_node::SetEddiebotModeResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // EDDIEBOT_NODE_SERVICE_SETEDDIEBOTMODE_H

